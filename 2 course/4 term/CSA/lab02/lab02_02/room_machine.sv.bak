import room_state::*;

module room_state_machine(
    input logic clk,
    input logic reset,
    input logic north, south, west, east,
    input logic sword_founded,
    output room_state_type room);

    room_state_type current_state, next_state;

    always_ff @( posedge clk, posedge reset )
        if(reset) current_state <= room_initial;
        else current_state <= next_state;

	 
		  
    always_comb
	 begin
	 next_state = current_state;
        case(current_state)
        
            room_initial:
                if(east) next_state = room_1;
                else next_state = room_initial;

            room_1:
                if(west) next_state = room_initial;
                else if(south) next_state = room_2;

            room_2:
                if(north) next_state = room_1;
                else if(west) next_state = room_3;
                else if(south) next_state = room_7;
                else if(east) next_state = room_4;

            room_3:
                if(east) next_state = room_2;

            room_4:
                if(sword_founded === 0) next_state = room_5;
                else if(east) next_state = room_6;
					 
				room_5:
					 next_state = room_5;
					 
				room_6:
					 next_state = room_6;

            room_7:
                if(east) next_state = room_8;

            room_8:
                if(west) next_state = room_7;
                else if(east) next_state = room_9;

            room_9:
                if(west) next_state = room_8;
                else if(north) next_state = room_6;

            default:
                next_state = room_initial;

        endcase
	 end

    assign room = current_state;

endmodule 